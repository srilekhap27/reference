const fetchAllRecords = async () => {
  let allFetchedRecords = [];  // Store all records
  let continuationToken = null;  // Token for fetching the next batch
  let hasMoreData = true;

  try {
    // Fetch records in batches of 50
    while (hasMoreData) {
      const res = await getAllRecords(continuationToken);  // Fetch records with token

      if (res.status === 200) {
        // Parse response data
        const data = res.data;

        // Parse `body` since it's a stringified JSON object
        const parsedBody = JSON.parse(data.body);  // Converts string to object
        const objects = parsedBody.objects || [];  // Now `objects` is an array

        // Convert the records and store them
        let startCount = allFetchedRecords.length + 1;
        let results = objects.map((entry) => {
          let [source, action, docName] = entry.split('/');
          let unix = convertUnixToDate(docName.split('_').pop());
          let date = new Date(unix);
          let dateString = date.toUTCString();

          return [startCount++, false, docName, source, dateString, action, entry];
        });

        // Append the newly fetched records to the allFetchedRecords array
        allFetchedRecords = [...allFetchedRecords, ...results];

        // Set the continuation token for the next fetch
        continuationToken = data.nextContinuationToken;

        // If no more tokens, we've fetched all the data
        if (!continuationToken) {
          hasMoreData = false;
        }
      } else {
        throw new Error('Error fetching records');
      }
    }

    // Store all fetched records in state
    setAllRecords(allFetchedRecords);
    console.log('All records fetched:', allFetchedRecords);

    // Initially display the first 50 records
    setDisplayedRecords(allFetchedRecords.slice(0, recordsPerPage));

    // Check if more data is available for "Load More" functionality
    setIsMoreData(allFetchedRecords.length > recordsPerPage);

  } catch (error) {
    console.error('Error fetching records:', error);
  }
};
