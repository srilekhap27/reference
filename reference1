package clients

import (
    "fmt"
    "log/slog"
    "net/http"
    "github.com/go-resty/resty/v2"
)

// Define the structure of the expected response (modify it according to your actual API response structure)
type DocumentMetadata struct {
    // Add necessary fields here
    DocumentID string `json:"documentId"`
    OwnerID    string `json:"ownerId"`
}

// GetDocumentMetadata calls the /documents/{documentGuid}/{displayDate} endpoint
func (client *RestyClientExt) GetDocumentMetadata(documentGuid, displayDate, partyId string) (*DocumentMetadata, int, error) {
    url := fmt.Sprintf("/documents/%s/%s", documentGuid, displayDate)

    // Make the GET request with headers (partyId included)
    resp, err := client.InnerClient.R().
        SetHeader("partyId", partyId).
        SetResult(&DocumentMetadata{}).  // Bind response to the DocumentMetadata struct
        Get(url)

    if err != nil {
        // Log and return the error
        slog.Error("Error making GET request to document retrieval service",
            slog.String("documentGuid", documentGuid),
            slog.String("displayDate", displayDate),
            slog.String("error", err.Error()))
        return nil, http.StatusInternalServerError, fmt.Errorf("failed to call document retrieval service: %v", err)
    }

    // Handle non-200 responses
    if resp.StatusCode() != http.StatusOK {
        slog.Error("Non-200 status code from document retrieval service",
            slog.String("documentGuid", documentGuid),
            slog.String("displayDate", displayDate),
            slog.Int("statusCode", resp.StatusCode()),
            slog.String("response", resp.String()))
        return nil, resp.StatusCode(), fmt.Errorf("received non-200 status code: %d", resp.StatusCode())
    }

    // Return the parsed result
    return resp.Result().(*DocumentMetadata), resp.StatusCode(), nil
}
--------------------------

package controller

import (
    "net/http"
    "github.com/gorilla/mux"
    "your-project/pkg/clients"
)

func GetDocumentHandler(w http.ResponseWriter, r *http.Request) {
    // Extract parameters from the path
    vars := mux.Vars(r)
    documentGuid := vars["documentGuid"]
    displayDate := vars["displayDate"]

    // Extract the partyId from headers (security context)
    partyId := r.Header.Get("partyId")

    // Call the restyClient to fetch the document metadata
    client := clients.NewRestyClient()
    metadata, statusCode, err := client.GetDocumentMetadata(documentGuid, displayDate, partyId)

    if err != nil {
        http.Error(w, "Failed to retrieve document", statusCode)
        return
    }

    // Respond with the document metadata (convert to JSON)
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(metadata)
}
