const handleSearch = (e) => {
  e.preventDefault();
  console.log("Calling handleSearch");

  if (!sourceObject && !actionObject && !errornameObject) {
    // Set the error message if no fields are filled
    setFilterErrorMessage('Any one field is required to submit.');
    return;
  }

  let combinedRecords = [];

  // Helper function to push a matching record into combinedRecords
  const addRecord = (keyErrorname, keySource, timestamp, keyAction, singleObj) => {
    const recordExists = combinedRecords.some(record =>
      record[2] === keyErrorname &&
      record[3] === keySource &&
      record[5] === keyAction
    );

    if (!recordExists) {
      combinedRecords.push([1, false, keyErrorname, keySource, timestamp, keyAction, singleObj]);
    }
  };

  // Fetch all records
  getAllRecords(null)
    .then((response) => {
      // Validate response and parse data
      if (!response || !response.data || !response.data.body) {
        setFilterErrorMessage("Invalid response structure");
        return;
      }

      let data;
      try {
        data = JSON.parse(response.data.body);
      } catch (e) {
        setFilterErrorMessage("Failed to parse response body");
        return;
      }

      if (!Array.isArray(data.objects) || data.objects.length === 0) {
        setFilterErrorMessage("No records matched your search criteria.");
        return;
      }

      const objects = data.objects;
      const timestamp = new Date(response.data.timestamp).toUTCString();

      // Iterate through all objects and apply the matching logic
      objects.forEach((singleObj) => {
        const [keySource, keyAction, keyErrorname] = singleObj.split("/");

        // Perform partial matching
        const sourceMatches = sourceObject && keySource.includes(sourceObject);
        const actionMatches = actionObject && keyAction.includes(actionObject);
        const errornameMatches = errornameObject && keyErrorname.includes(errornameObject);

        // Matching Conditions
        if (sourceMatches && !actionObject && !errornameObject) {
          console.log("Source matched with empty Action and Errorname");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (actionMatches && !sourceObject && !errornameObject) {
          console.log("Action matched with empty Source and Errorname");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (errornameMatches && !sourceObject && !actionObject) {
          console.log("Errorname matched with empty Source and Action");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (sourceMatches && actionMatches && !errornameObject) {
          console.log("Source and Action matched with empty Errorname");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (actionMatches && errornameMatches && !sourceObject) {
          console.log("Action and Errorname matched with empty Source");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (sourceMatches && errornameMatches && !actionObject) {
          console.log("Source and Errorname matched with empty Action");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        } else if (sourceMatches && actionMatches && errornameMatches) {
          console.log("Source, Action, and Errorname matched");
          addRecord(keyErrorname, keySource, timestamp, keyAction, singleObj);
        }
      });

      // Handle no matches found
      if (combinedRecords.length === 0) {
        setFilterErrorMessage("No records matched your search criteria.");
        setRecords([]);
        setIsMoreData(false);
      } else {
        setRecords([...combinedRecords]);  // Update state with the new records
      }
    })
    .catch((error) => {
      setFilterErrorMessage("Error fetching records: " + error);
    });
};

// Function to reset the filters
const resetFilters = () => {
  // Reload the page
  window.location.reload();

  // Reset the source, action, and error name state
  setSourceObject('');
  setActionObject('');
  setErrornameObject('');
};
